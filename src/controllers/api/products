// const router = require("express").Router();
const { Product, Category, Tag, ProductTag } = require("../../models");

const getAllProducts = async (req, res) => {
  // find all categories
  // be sure to include its associated Category and Tag data
  // - /api/products
  // - if internal server error return a status code of 500
};

const getProductById = async (req, res) => {
  // find one Product by its `id` value
  // be sure to include its associated Category and Tag data
  // - /api/products/:id
  // - if not found return a status of 404
  // - if internal server error return a status code of 500
};

const createProduct = async (req, res) => {
  // create a new Product
  // - /api/products
  // - validate the payload and if bad request return status code of 400
  // - if internal server error return a status code of 500
};

const updateProductById = async (req, res) => {
  // update a Product by its `id` value
  // - /api/products/:id
  // - validate the payload and if bad request return status code of 400
  // - if not found return a status of 404
  // - if internal server error return a status code of 500
};

const deleteProductById = async (req, res) => {
  // delete a Product by its `id` value
  // - /api/products/:id
  // - if not found return a status of 404
  // - if internal server error return a status code of 500
};

module.exports = {
  getAllProducts,
  getProductById,
  createProduct,
  updateProductById,
  deleteProductById,
};

// Starter code e.g.s

// // create new product
// const post = async (req, res) => {
//     /* req.body should look like this...
//       {
//         product_name: "Basketball",
//         price: 200.00,
//         stock: 3,
//         tagIds: [1, 2, 3, 4]
//       }
//     */
//     Product.create(req.body)
//       .then((product) => {
//         // if there's product tags, we need to create pairings to bulk create in the ProductTag model
//         if (req.body.tagIds.length) {
//           const productTagIdArr = req.body.tagIds.map((tag_id) => {
//             return {
//               product_id: product.id,
//               tag_id,
//             };
//           });
//           return ProductTag.bulkCreate(productTagIdArr);
//         }
//         // if no product tags, just respond
//         res.status(200).json(product);
//       })
//       .then((productTagIds) => res.status(200).json(productTagIds))
//       .catch((err) => {
//         console.log(err);
//         res.status(400).json(err);
//       });
//   })

//   // update product
//   const put = async (req, res) => {
//     // update product data
//     Product.update(req.body, {
//       where: {
//         id: req.params.id,
//       },
//     })
//       .then((product) => {
//         // find all associated tags from ProductTag
//         return ProductTag.findAll({ where: { product_id: req.params.id } });
//       })
//       .then((productTags) => {
//         // get list of current tag_ids
//         const productTagIds = productTags.map(({ tag_id }) => tag_id);
//         // create filtered list of new tag_ids
//         const newProductTags = req.body.tagIds
//           .filter((tag_id) => !productTagIds.includes(tag_id))
//           .map((tag_id) => {
//             return {
//               product_id: req.params.id,
//               tag_id,
//             };
//           });
//         // figure out which ones to remove
//         const productTagsToRemove = productTags
//           .filter(({ tag_id }) => !req.body.tagIds.includes(tag_id))
//           .map(({ id }) => id);

//         // run both actions
//         return Promise.all([
//           ProductTag.destroy({ where: { id: productTagsToRemove } }),
//           ProductTag.bulkCreate(newProductTags),
//         ]);
//       })
//       .then((updatedProductTags) => res.json(updatedProductTags))
//       .catch((err) => {
//         // console.log(err);
//         res.status(400).json(err);
//       });
//   };
